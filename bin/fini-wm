#!/usr/bin/perl
# TODO: test on a fresh machine
# TODO: handle IP's
# TODO: restart apache

use strict;
use warnings;
use Carp;
use English;
#use Data::Dumper;
use Sys::Hostname;
use JSON;
use File::Slurp qw(read_file write_file);
use IO::Prompt;
use Mojo::Template;

# constants
my $host = hostname;
my $meta_dirname = "/etc/fini";
my $meta_filename = "$meta_dirname/$host.json";
my $default_owner = 'chicks.chicks';
my $default_email = 'chicks.net@gmail.com';

# read arguments
my $usage = "command missing, usage:\n";
$usage .= "\tfini-wm <command> <args>\n";
$usage .= "commands are create or certrenew\n";
my $argc = scalar @ARGV;
croak $usage unless $argc > 0;

my $command = shift @ARGV;

# pick command
if ($command eq 'create') {
	my $usage = "create args: <short_name> <hostname> <owner>";

	my $short_name = shift @ARGV or croak "missing short_name... $usage";
	my $hostname = shift @ARGV or croak "missing hostname... $usage";
	my $owner = shift @ARGV or croak "missing owner... $usage";
	fwm_create($short_name,$hostname,$owner);
} elsif ($command eq 'certrenew') {
	fwm_certrenew();
} else {
	croak "$command does not exist";
}

sub fwm_create {
	my ($short_name,$hostname,$owner) = @_;

	# read metafile
	my $meta = fwm_getmeta();

	# add our thing
	my $site_meta = $meta->{$short_name};
	unless (defined $site_meta) {
		print "adding $short_name to meta...\n";
		my $new_site_meta = {
			webroot => '/www/' . $short_name,
			docroot => '/www/' . $short_name . '/docroot',
			logdir => '/var/log/httpd/' . $short_name,
			certdir => '/etc/httpd/certs/' . $short_name,
			configfile => '/etc/httpd/conf.d/' . $short_name . '.conf',
			hostname => $hostname,
			owner => $owner,
			short_name => $short_name,
		};
		$site_meta = $meta->{$short_name} = $new_site_meta;
	} else {
		print "$short_name ALREADY in meta...\n";
		croak "no webroot" unless defined $site_meta->{webroot};
		croak "no docroot" unless defined $site_meta->{docroot};
		croak "no logdir" unless defined $site_meta->{logdir};
	}

	# write metafile
	write_json($meta_filename,$meta);

	# create directories
	unless (-d '/www/') {
		print "no websites yet on this host...\n";
		system("sudo mkdir /www") and croak "mkdir /www failed";
	}

	# root-owned directories
	foreach my $logdir ($site_meta->{logdir}, $site_meta->{webroot}) {
		unless (-d $logdir) {
			print "mkdir($logdir) root...\n";
			system("sudo mkdir $logdir") and croak "mkdir $logdir failed";
		}

		unless (-r $logdir) {
			croak "$logdir unreadable";
		}
	}

	# user-owned directories
	foreach my $userdir ($site_meta->{docroot}, $site_meta->{certdir}) {
		unless (-d $userdir) {
			print "mkdir($userdir)...\n";
			system("sudo mkdir $userdir") and croak "mkdir $userdir failed";
		}

		my $owner = $site_meta->{owner};

		unless (-w $userdir) {
			print "chown($owner,$userdir)...\n";
			system("sudo chown $owner $userdir") and croak "chown $owner $userdir failed";
		}
	}

	# template httpd site config file
	fwm_httpd_template($site_meta);

	# download first cert
	fwm_getcert($site_meta);

	print "$short_name/$hostname created!\n";
}

sub fwm_httpd_template {
	my($site_meta) = @_;
	my $configfile = $site_meta->{configfile};

	my $template;
	{
		local $/ = undef;
		$template = <DATA>;
	}

	# process template
	my $mt = Mojo::Template->new;
	my $filledin_config = $mt->render($template,$site_meta);
	my $config_size = length $filledin_config;

	unless (-e $configfile) {
		# just create it
		touch($configfile,$default_owner);
		print "writing $config_size bytes to $configfile...\n";
		write_file($configfile,$filledin_config);
	} else {
		# compare to existing
		my $tempconfig = $configfile . '.new';
		touch($tempconfig,$default_owner);
		print "writing $config_size bytes to $tempconfig...\n";
		write_file($tempconfig,$filledin_config);
		print "\n";
		my $diff_ret = system("colordiff -c $configfile $tempconfig");

		$diff_ret = $diff_ret >> 8; # shift away flags
		unless ($diff_ret) {
			print "no change, deleting $tempconfig...\n";
			system("sudo rm $tempconfig") and croak "sudo(rm $tempconfig) failed";
		} else {
			print "\n";
			if (prompt "replace config?", -yn1) {
				system("sudo mv $tempconfig $configfile") and croak "sudo(mv $tempconfig $configfile) failed";
				print "$configfile replaced with new\n";
			} else {
				system("sudo rm $tempconfig") and croak "sudo(rm $tempconfig) failed";
				print "old $configfile kept\n";
			}
		}
	}
}

sub fwm_getcert {
	my ($site_meta) = @_;

	# cd($certdir)
	my $certdir = $site_meta->{certdir};
	unless (-d $certdir and -w $certdir) {
		croak "invalid certificate dir $certdir";
	}
	chdir($certdir) or croak "failed cd($certdir): $!";

	# get cert
	my $hostname = $site_meta->{hostname};
	my $docroot = $site_meta->{docroot};
	my $command = "simp_le -d $hostname:$docroot -f account_key.json "
		. ' -f key.pem -f cert.pem -f fullchain.pem --email ' . $default_email;

	unless ($hostname =~ /example.com/ or $site_meta->{short_name} eq 'foo') {
		print "running $command ...\n";
		system($command) and croak "simp_le failed";
	} else {
		print "SKIPPING $command\n";
	}
}

sub fwm_certrenew {
	my $meta = fwm_getmeta();

	foreach my $short_name (keys %$meta) {
		my $site_meta = $meta->{$short_name};
		fwm_getcert($site_meta);
	}
}

sub fwm_getmeta {
	# dir
	unless (-d $meta_dirname) {
		print "missing $meta_dirname...\n";
		system("sudo mkdir $meta_dirname") and croak "mkdir failed";
		system("sudo chown $default_owner $meta_dirname") and croak "chown failed";
	}

	# metafile
	unless (-e $meta_filename) {
		touch($meta_filename,$default_owner);
	}

	unless (-w $meta_filename) {
		croak "odd, I can't write to $meta_filename";
	}

	# read/parse file
	my $raw_json = read_file($meta_filename);
	unless (length $raw_json) {
		print "empty meta $meta_filename...\n";
		return {};
	}
	my $json = JSON->new->allow_nonref; # no html fiddling, brilliant!
	my $meta = $json->decode($raw_json);

	return $meta;
}

sub touch {
	my ($filename,$owner) = @_;

	unless (-e $filename) {
		print "touching $filename (for $owner)...\n";
		system("sudo touch $filename") and croak "touch failed";
		system("sudo chown $owner $filename") and croak "touch failed";
	}
}

sub write_json {
	my ( $filename, $data ) = @_;
	my $json     = JSON->new->allow_nonref;
	my $json_out = $json->pretty->canonical->allow_blessed->encode($data);
	my $json_fh;
	open( $json_fh, ">:utf8", $filename ) or croak "could not open $filename for write: $ERRNO";
	print $json_fh $json_out;
	close($json_fh);
	my $size = -s $filename;
	print "wrote $filename ($size bytes)\n";
	return $size;
}

__DATA__
% my ($site_meta) = @_;
% my $docroot = $site_meta->{docroot};
% my $certdir = $site_meta->{certdir};
% my $hostname = $site_meta->{hostname};
% my $short_name = $site_meta->{short_name};
#
# When we also provide SSL we have to listen to the
# the HTTPS port in addition.
#
#Listen 443 https
<Directory "<%= $docroot %>">
	AllowOverride FileInfo AuthConfig Limit Indexes
	Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
	Require method GET POST OPTIONS
	SSLOptions +StdEnvVars
</Directory>

<VirtualHost _default_:80>
	ServerName <%= $hostname %>
	ErrorLog logs/<%= $short_name %>/error_log
	TransferLog logs/<%= $short_name %>/access_log

	DocumentRoot "<%= $docroot %>"
</VirtualHost>


<VirtualHost _default_:443>
	ServerName <%= $hostname %>:443

	DocumentRoot "<%= $docroot %>"

	# Use separate log files for the SSL virtual host; note that LogLevel
	# is not inherited from httpd.conf.
	ErrorLog logs/<%= $short_name %>/ssl_error_log
	TransferLog logs/<%= $short_name %>/ssl_access_log
	LogLevel warn

	#   SSL Engine Switch:
	SSLEngine on

	#   SSL Protocol support:
	SSLProtocol all -SSLv2

	#   SSL Cipher Suite:
	SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5

	#   Server Certificate:
	SSLCertificateFile <%= $certdir %>/cert.pem

	#   Server Private Key:
	SSLCertificateKeyFile <%= $certdir %>/key.pem

	#   Server Certificate Chain:
	SSLCertificateChainFile <%= $certdir %>/fullchain.pem

	#   Certificate Authority (CA):
	#SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt

	#   Access Control:
	#   With SSLRequire you can do per-directory access control based
	#   on arbitrary complex boolean expressions containing server
	#   variable checks and other lookup directives.  The syntax is a
	#   mixture between C and Perl.  See the mod_ssl documentation
	#   for more details.
	#<Location />
	#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \\
	#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \\
	#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \\
	#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \\
	#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \\
	#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
	#</Location>

	#   SSL Engine Options:
	#   Set various options for the SSL engine.
	#   o FakeBasicAuth:
	#     Translate the client X.509 into a Basic Authorisation.  This means that
	#     the standard Auth/DBMAuth methods can be used for access control.  The
	#     user name is the `one line' version of the client's X.509 certificate.
	#     Note that no password is obtained from the user. Every entry in the user
	#     file needs this password: `xxj31ZMTZzkVA'.
	#   o ExportCertData:
	#     This exports two additional environment variables: SSL_CLIENT_CERT and
	#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
	#     server (always existing) and the client (only existing when client
	#     authentication is used). This can be used to import the certificates
	#     into CGI scripts.
	#   o StdEnvVars:
	#     This exports the standard SSL/TLS related `SSL_*' environment variables.
	#     Per default this exportation is switched off for performance reasons,
	#     because the extraction step is an expensive operation and is usually
	#     useless for serving static content. So one usually enables the
	#     exportation for CGI and SSI requests only.
	#   o StrictRequire:
	#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
	#     under a "Satisfy any" situation, i.e. when it applies access is denied
	#     and no other module can change it.
	#   o OptRenegotiate:
	#     This enables optimized SSL connection renegotiation handling when SSL
	#     directives are used in per-directory context.
	#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
	<Files ~ "\.(cgi|shtml|phtml|php3?)$">
	    SSLOptions +StdEnvVars
	</Files>
	<Directory "/var/www/cgi-bin">
	    SSLOptions +StdEnvVars
	</Directory>

	#   SSL Protocol Adjustments:
	#   The safe and default but still SSL/TLS standard compliant shutdown
	#   approach is that mod_ssl sends the close notify alert but doesn't wait for
	#   the close notify alert from client. When you need a different shutdown
	#   approach you can use one of the following variables:
	#   o ssl-unclean-shutdown:
	#     This forces an unclean shutdown when the connection is closed, i.e. no
	#     SSL close notify alert is send or allowed to received.  This violates
	#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
	#     this when you receive I/O errors because of the standard approach where
	#     mod_ssl sends the close notify alert.
	#   o ssl-accurate-shutdown:
	#     This forces an accurate shutdown when the connection is closed, i.e. a
	#     SSL close notify alert is send and mod_ssl waits for the close notify
	#     alert of the client. This is 100% SSL/TLS standard compliant, but in
	#     practice often causes hanging connections with brain-dead browsers. Use
	#     this only for browsers where you know that their SSL implementation
	#     works correctly.
	#   Notice: Most problems of broken clients are also related to the HTTP
	#   keep-alive facility, so you usually additionally want to disable
	#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
	#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
	#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
	#   "force-response-1.0" for this.
	BrowserMatch "MSIE [2-5]" \\
		 nokeepalive ssl-unclean-shutdown \\
		 downgrade-1.0 force-response-1.0

	#   Per-Server Logging:
	#   The home of a custom SSL log file. Use this when you want a
	#   compact non-error SSL logfile on a virtual host basis.
	CustomLog logs/<%= $short_name %>/ssl_request_log \\
		  "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

</VirtualHost>
