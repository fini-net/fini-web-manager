#!/usr/bin/perl

use strict;
use warnings;
use Carp;
use English;
use Data::Dumper;
#use Sys::Hostname;
use IO::Prompt;
#use JSON;
use File::Slurp qw(read_file write_file);
 
# constants
#my $host = hostname;
#my $meta_dirname = "/etc/fini";
#my $meta_filename = "$meta_dirname/$host.json";
#my $default_email = 'chicks.net@gmail.com';

# read arguments
my $usage = "usage:\n";
$usage .= "\tfini-reqs [<filename>]\n";
$usage .= "where <filename> is a requirements file\n";
my $argc = scalar @ARGV;

my $reqs_file = 'meta/requirements.txt';
if ($argc) {
	$reqs_file = shift @ARGV;
}
unless (-e $reqs_file) {
	croak "no such file $reqs_file";
}

# read requirements
my $file_raw = read_file($reqs_file);
my $reqs = process_config($file_raw);
#print Dumper($reqs);

my $empty = [];
my @system_packages = @{$reqs->{package} || $empty};
if (defined $reqs->{deb} ) {
	croak "unimplemented";
}
if (defined $reqs->{rpm} ) {
	croak "unimplemented";
}

my @perl_packages;
if (defined $reqs->{Perl} ) {
	push(@system_packages, translate_perl($reqs->{Perl}) );
}

my $install_packages = join(' ',@system_packages);
print "packages: $install_packages\n";
my $install_count = scalar @system_packages;
if ($install_count) {
	if (prompt "install $install_count packages?", -yn1) {
		my $distro = native_packager();
		if ($distro eq 'rpm') {
			croak "unimplemented";
		} elsif ($distro eq 'deb') {
			system("sudo apt-get install $install_packages");
		} else {
			croak "impossible";
		}
	} else {
		carp "have fun without your unfulfilled requirements";
	}
} else {
	carp "nothing to install";
}


sub translate_perl {
	my ($perl_modules) = @_;
	my $distro = native_packager();
	my @perl_packages;

	my $map = {
		deb => {
			DateTime => 'libdatetime-perl',
			'LWP::Simple' => 'libwww-perl',
			JSON => 'libjson-perl',
			'Chart::Strip' => 'libchart-strip-perl',
			Readonly => 'libreadonly-perl',
			'Text::CSV' => 'libtext-csv-perl',
			'Statistics::Basic' => 'libstatistics-basic-perl',

		},
		rpm => {
			DateTime => 'perl-DateTime',
		},
	};

	foreach my $module (@$perl_modules) {
		if (defined $map->{$distro}->{$module}) {
			push(@perl_packages,$map->{$distro}->{$module});
		} else {
			croak "$module not mapped to system package";
		}
	}

	return @perl_packages;
}

sub native_packager {
	my $lsb_release = `lsb_release -i`;
	my @lines = split(/\n/,$lsb_release);
	foreach my $line (@lines) {
		next unless $line =~ /^Distributor ID:/;
		$line =~ s/^Distributor ID:\s*//;
		my $distro = $line;
		if ($distro eq 'CentOS') {
			return 'rpm';
		} elsif ($distro eq 'Ubuntu') {
			return 'deb';
		} else {
			croak "'$distro' unrecognized";
		}
	}
	croak "no distro found from lsb_release";
}

sub process_config {
	my ($raw_config) = @_;
	my @lines = split(/\n/,$raw_config);
	my $tree;
	my $section;
	foreach my $line (@lines) {
		if ($line =~ /^\[(.+)\]$/) {
			$section = $1;
		} elsif ($line =~ /^[^[]/) {
			croak "no section yet at $line" unless defined $section;
			push(@{$tree->{$section}},$line);
		} elsif (length($line) == 0) {
			# blank line!
		} else {
			croak "line '$line' did not parse";
		}
	}

	return $tree;
}
__END__
life-graphs
===========

graphs of health, money, and technology

PREREQUISITES
-------------

If you want to do more than view my personal graphs on the Internet you should install these
Perl modules (debian packages):

DATA COLLECTORS DONE
--------------------

* TECH: dnetc rc5-72
* TECH: Steam profile
* TECH: Steam game hours played
* TECH: ebay
* TECH: gmail aggregate stats
* TECH: gmail for Citibank balance

GRAPHS DONE
-----------

* ebay
* Steam
* rc5

TECH TODO
---------

* interactive Storable editor instead of ad-hoccery like `edit_storable`
* fix Steam collector bugs, reduce output

GRAPHS TODO
-----------

There are many graphs that I want to make, but these have data that is ready to graph:

* Steam: a stacked chart of hours per game

DATA COLLECTORS TODO
--------------------

There are many data collectors that I want to make, but these are the top priorities:

* TECH: dnetc ogr summary and history
* TECH: github LoC committed
* TECH: fini inbox size
* FINANCE: Citi balances (partially satisfied by gmail collector)
* FINANCE: Fidelity balances
* FINANCE: OpenSRS balance
* FINANCE: paypal balances
* FINANCE: mobile balance, minutes used, bytes used
* HEALTH: fitbit autosync
* HEALTH: pull ups
* HEALTH: sit ups
* HEALTH: push ups

Email graphs
------------

For each of the various sources of email it would be nice to have things like:

* sent emails per hour and day
* read emails per hour and day (how do you do that with alpine?)
* unread emails
* total emails

Inspirations
------------

* Jehiah's annual reports are beautiful.  For instance: [Jehiah 13](http://jehiah.cz/one-three/)
* Of course Stephen Wolfram was a few years ahead with [The Personal Analytics of My Life](http://blog.stephenwolfram.com/2012/03/the-personal-analytics-of-my-life/).
* [The Feltron Annual Report](http://feltron.com/ar12_01.html) is a beautiful presentation of extensive data

Informative
-----------

* [10 things I learned deployed graphite](http://kevinmccarthy.org/blog/2013/07/18/10-things-i-learned-deploying-graphite/) helped me not relearn those same things.
* thanks to [graphing time based data in perl](http://www.preshweb.co.uk/2011/11/graphing-time-based-data-in-perl/) for publishing a good example of `Chart::Strip` to get me started.
* thanks to Aleks Jakulin whose article [Assistance in picking colors and charts](http://andrewgelman.com/2007/11/22/assistance_in_p/) for helping me find [ColorBrewer](http://www.personal.psu.edu/cab38/ColorBrewer/ColorBrewer.html).  This is even more awesome because Aleks wrote his article in 2007, seven years before I found it helpful!  It was neat seeing ColorBrewer get such a thorough introduction in David Kadavy's [Design &lt;for> Hackers](http://smile.amazon.com/Design-Hackers-Reverse-Engineering-Beauty/dp/1119998956/ref=sr_1_1?ie=UTF8&qid=1425264168&sr=8-1&keywords=hackers+design).
* thanks to [Kamil PÃ¡ral](https://github.com/kparal) for [gkeyring](https://github.com/kparal/gkeyring) to get access to the gnome keyring from the command line.
* thanks to Valve for providing the [Steam API](http://steamcommunity.com/dev).
